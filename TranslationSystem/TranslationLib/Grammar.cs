using IronPython.Hosting;
using Microsoft.Scripting.Hosting;
using System.Diagnostics;
using System.IO;
using System.Collections.Generic;

namespace TranslationLib
{
    public class Grammar
    {
        public List<Rule> Rules;

        public Grammar()
        {
            Rules = new List<Rule>();
            foreach (var s in rules)
            {
                Rules.Add(new Rule(s));
            }
        }

        public string TopLevelRule(ParseTree tree)
        {
            var rights = "";
            foreach (var c in tree.root.children)
            {
                rights = rights + c.value + " ";
            }
            return tree.root.value + " -> " + rights.Substring(0, rights.Length - 1);
        }

        private string isFunction(string w)
        {
            for (int i = 0; i < function_words_tags.GetLength(0); i++)
                for (int j = 0; j < function_words_tags.GetLength(1); j++)
                {
                    if (w == function_words_tags[i, j]) return function_words_tags[i, 0];
                }
            return "";
        }

        private string noun_stem(string x)
        {
            ScriptEngine engine = Python.CreateEngine();
            ScriptScope scope = engine.CreateScope();

            engine.ExecuteFile("../../../TranslationLib/noun_stem.py", scope);
            dynamic function = scope.GetVariable("noun_stem");
            dynamic result = function(x);
            return result.ToString();
        }

        private string verb_stem(string x)
        {
            var fileName = "C:/Users/Sonya/Desktop/VCR/TranslationSystem_git/TranslationSystem/TranslationLib/verb_stem.py";
            ProcessStartInfo start = new ProcessStartInfo(@"C:\Users\Sonya\AppData\Local\Programs\Python\Python36\python.exe", fileName);
            start.Arguments = string.Format(fileName + " " + x);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    process.WaitForExit();
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script                   
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")

                    return result.Substring(0, result.Length - 2);
                }
            }
        }

        public void POS_Tagging(Lexicon lx)
        {
            /* Grammar for the statement language is:
            #   S  -> P is AR Ns | P is A | P Is | P Ts P
            #   AR -> a | an*/
            var wlist = lx.getAll();
            foreach (var w in wlist)
            {
                if ('A' <= w.Word[0] && w.Word[0] <= 'Z' && isFunction(w.Word) == "")
                    w.POSTags.Add("P");

                string f = isFunction(w.Word);
                if (!string.IsNullOrEmpty(f))
                {
                    w.POSTags.Add(f);
                }
            }

            if (wlist[1].Word == "is")
            {
                if (wlist[2].Word == "a" || wlist[2].Word == "an" || wlist[2].Word == "the")
                    if (!wlist[3].POSTags.Contains("N")) wlist[3].POSTags.Add("N");
                    else
                         if (!wlist[2].POSTags.Contains("A")) wlist[3].POSTags.Add("A");
            }
            else
            {
                string stem = verb_stem(wlist[1].Word);
                if (wlist.Count == 2)
                {
                    wlist[1].Word = stem;
                    if (!wlist[1].POSTags.Contains("I")) wlist[1].POSTags.Add("I");
                }
                else
                if (wlist[2].POSTags.Contains("P"))
                {
                    wlist[1].Word = stem;
                    if (!wlist[1].POSTags.Contains("T")) wlist[1].POSTags.Add("T");
                }
            }

            lx.changeLx(wlist);
        }

        string[] rules = new string[] {
            "S -> WHAT VP OF NP OF NP VP|WHAT VP OF NP|WHAT VP OF NP VP|WHOSE NP VP",
            "VP -> I|T NP|BE A|BE NP|VP AND VP|WITH NP LIKE NP|ABOUT NP"  ,
            "NP -> P|AR Nom|Nom",
            "Nom -> AN|AN Rel",
            "AN -> N|A AN",
            "Rel -> WHO VP|NP T",
            "I -> 'Is'|'Ip'",
            "T -> 'Ts'|'Tp'",
            "BE -> BEs|BEp",
            "WHO -> 'WHO'",
            "WHAT -> WHICH",
            "LIKE -> 'LIKE'",
            "WITH -> 'WITH'",
            "ABOUT -> 'ABOUT'",
            "WHOSE -> 'WHOSE'"
        };

        string[,] function_words_tags = new string[,] {
           { "BEs", "is", "was", "" },
           { "BEp", "are", "were", "" },
           {"AR", "a", "an", "the" },
           {"AND", "and", "", ""  },
           {"'WHO'", "Who", "", "" },
           {"WHICH", "Which" , "", ""},
           {"WHAT" , "What" , "", ""},
           {"OR", "or" , "", ""},
           {"OF", "of", "", ""},
           {"'LIKE'", "like", "", ""},
           {"'WITH'", "with", "", ""},
           {"'ABOUT'", "about", "", ""},
           { "'WHOSE'", "Whose" , "", ""}
           };
    }
}
